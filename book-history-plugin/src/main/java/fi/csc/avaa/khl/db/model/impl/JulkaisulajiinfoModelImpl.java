package fi.csc.avaa.khl.db.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;

import fi.csc.avaa.khl.db.model.Julkaisulajiinfo;
import fi.csc.avaa.khl.db.model.JulkaisulajiinfoModel;
import fi.csc.avaa.khl.db.model.JulkaisulajiinfoSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the Julkaisulajiinfo service. Represents a row in the &quot;julklajiinfo&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link fi.csc.avaa.khl.db.model.JulkaisulajiinfoModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link JulkaisulajiinfoImpl}.
 * </p>
 *
 * @author CSC
 * @see JulkaisulajiinfoImpl
 * @see fi.csc.avaa.khl.db.model.Julkaisulajiinfo
 * @see fi.csc.avaa.khl.db.model.JulkaisulajiinfoModel
 * @generated
 */
@JSON(strict = true)
public class JulkaisulajiinfoModelImpl extends BaseModelImpl<Julkaisulajiinfo>
    implements JulkaisulajiinfoModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a julkaisulajiinfo model instance should use the {@link fi.csc.avaa.khl.db.model.Julkaisulajiinfo} interface instead.
     */
    public static final String TABLE_NAME = "julklajiinfo";
    public static final Object[][] TABLE_COLUMNS = {
            { "julklajiid", Types.INTEGER },
            { "julklaji", Types.VARCHAR }
        };
    public static final String TABLE_SQL_CREATE = "create table julklajiinfo (julklajiid INTEGER not null primary key,julklaji VARCHAR(75) null)";
    public static final String TABLE_SQL_DROP = "drop table julklajiinfo";
    public static final String ORDER_BY_JPQL = " ORDER BY julkaisulajiinfo.julklajiid ASC";
    public static final String ORDER_BY_SQL = " ORDER BY julklajiinfo.julklajiid ASC";
    public static final String DATA_SOURCE = "khl";
    public static final String SESSION_FACTORY = "khlSessionFactory";
    public static final String TX_MANAGER = "liferayTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.fi.csc.avaa.khl.db.model.Julkaisulajiinfo"),
            true);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.fi.csc.avaa.khl.db.model.Julkaisulajiinfo"),
            true);
    public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.column.bitmask.enabled.fi.csc.avaa.khl.db.model.Julkaisulajiinfo"),
            true);
    public static long JULKLAJI_COLUMN_BITMASK = 1L;
    public static long JULKLAJIID_COLUMN_BITMASK = 2L;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
                "lock.expiration.time.fi.csc.avaa.khl.db.model.Julkaisulajiinfo"));
    private static ClassLoader _classLoader = Julkaisulajiinfo.class.getClassLoader();
    private static Class<?>[] _escapedModelInterfaces = new Class[] {
            Julkaisulajiinfo.class
        };
    private int _julklajiid;
    private String _julklaji;
    private String _originalJulklaji;
    private long _columnBitmask;
    private Julkaisulajiinfo _escapedModel;

    public JulkaisulajiinfoModelImpl() {
    }

    /**
     * Converts the soap model instance into a normal model instance.
     *
     * @param soapModel the soap model instance to convert
     * @return the normal model instance
     */
    public static Julkaisulajiinfo toModel(JulkaisulajiinfoSoap soapModel) {
        if (soapModel == null) {
            return null;
        }

        Julkaisulajiinfo model = new JulkaisulajiinfoImpl();

        model.setJulklajiid(soapModel.getJulklajiid());
        model.setJulklaji(soapModel.getJulklaji());

        return model;
    }

    /**
     * Converts the soap model instances into normal model instances.
     *
     * @param soapModels the soap model instances to convert
     * @return the normal model instances
     */
    public static List<Julkaisulajiinfo> toModels(
        JulkaisulajiinfoSoap[] soapModels) {
        if (soapModels == null) {
            return null;
        }

        List<Julkaisulajiinfo> models = new ArrayList<Julkaisulajiinfo>(soapModels.length);

        for (JulkaisulajiinfoSoap soapModel : soapModels) {
            models.add(toModel(soapModel));
        }

        return models;
    }

    @Override
    public int getPrimaryKey() {
        return _julklajiid;
    }

    @Override
    public void setPrimaryKey(int primaryKey) {
        setJulklajiid(primaryKey);
    }

    @Override
    public Serializable getPrimaryKeyObj() {
        return _julklajiid;
    }

    @Override
    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey(((Integer) primaryKeyObj).intValue());
    }

    @Override
    public Class<?> getModelClass() {
        return Julkaisulajiinfo.class;
    }

    @Override
    public String getModelClassName() {
        return Julkaisulajiinfo.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("julklajiid", getJulklajiid());
        attributes.put("julklaji", getJulklaji());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        Integer julklajiid = (Integer) attributes.get("julklajiid");

        if (julklajiid != null) {
            setJulklajiid(julklajiid);
        }

        String julklaji = (String) attributes.get("julklaji");

        if (julklaji != null) {
            setJulklaji(julklaji);
        }
    }

    @JSON
    @Override
    public int getJulklajiid() {
        return _julklajiid;
    }

    @Override
    public void setJulklajiid(int julklajiid) {
        _julklajiid = julklajiid;
    }

    @JSON
    @Override
    public String getJulklaji() {
        if (_julklaji == null) {
            return StringPool.BLANK;
        } else {
            return _julklaji;
        }
    }

    @Override
    public void setJulklaji(String julklaji) {
        _columnBitmask |= JULKLAJI_COLUMN_BITMASK;

        if (_originalJulklaji == null) {
            _originalJulklaji = _julklaji;
        }

        _julklaji = julklaji;
    }

    public String getOriginalJulklaji() {
        return GetterUtil.getString(_originalJulklaji);
    }

    public long getColumnBitmask() {
        return _columnBitmask;
    }

    @Override
    public Julkaisulajiinfo toEscapedModel() {
        if (_escapedModel == null) {
            _escapedModel = (Julkaisulajiinfo) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelInterfaces, new AutoEscapeBeanHandler(this));
        }

        return _escapedModel;
    }

    @Override
    public Object clone() {
        JulkaisulajiinfoImpl julkaisulajiinfoImpl = new JulkaisulajiinfoImpl();

        julkaisulajiinfoImpl.setJulklajiid(getJulklajiid());
        julkaisulajiinfoImpl.setJulklaji(getJulklaji());

        julkaisulajiinfoImpl.resetOriginalValues();

        return julkaisulajiinfoImpl;
    }

    @Override
    public int compareTo(Julkaisulajiinfo julkaisulajiinfo) {
        int primaryKey = julkaisulajiinfo.getPrimaryKey();

        if (getPrimaryKey() < primaryKey) {
            return -1;
        } else if (getPrimaryKey() > primaryKey) {
            return 1;
        } else {
            return 0;
        }
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }

        if (!(obj instanceof Julkaisulajiinfo)) {
            return false;
        }

        Julkaisulajiinfo julkaisulajiinfo = (Julkaisulajiinfo) obj;

        int primaryKey = julkaisulajiinfo.getPrimaryKey();

        if (getPrimaryKey() == primaryKey) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return getPrimaryKey();
    }

    @Override
    public void resetOriginalValues() {
        JulkaisulajiinfoModelImpl julkaisulajiinfoModelImpl = this;

        julkaisulajiinfoModelImpl._originalJulklaji = julkaisulajiinfoModelImpl._julklaji;

        julkaisulajiinfoModelImpl._columnBitmask = 0;
    }

    @Override
    public CacheModel<Julkaisulajiinfo> toCacheModel() {
        JulkaisulajiinfoCacheModel julkaisulajiinfoCacheModel = new JulkaisulajiinfoCacheModel();

        julkaisulajiinfoCacheModel.julklajiid = getJulklajiid();

        julkaisulajiinfoCacheModel.julklaji = getJulklaji();

        String julklaji = julkaisulajiinfoCacheModel.julklaji;

        if ((julklaji != null) && (julklaji.length() == 0)) {
            julkaisulajiinfoCacheModel.julklaji = null;
        }

        return julkaisulajiinfoCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(5);

        sb.append("{julklajiid=");
        sb.append(getJulklajiid());
        sb.append(", julklaji=");
        sb.append(getJulklaji());
        sb.append("}");

        return sb.toString();
    }

    @Override
    public String toXmlString() {
        StringBundler sb = new StringBundler(10);

        sb.append("<model><model-name>");
        sb.append("fi.csc.avaa.khl.db.model.Julkaisulajiinfo");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>julklajiid</column-name><column-value><![CDATA[");
        sb.append(getJulklajiid());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>julklaji</column-name><column-value><![CDATA[");
        sb.append(getJulklaji());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
