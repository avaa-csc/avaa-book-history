package fi.csc.avaa.khl.db.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;

import fi.csc.avaa.khl.db.model.Kielesta;
import fi.csc.avaa.khl.db.model.KielestaModel;
import fi.csc.avaa.khl.db.model.KielestaSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the Kielesta service. Represents a row in the &quot;kielesta&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link fi.csc.avaa.khl.db.model.KielestaModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link KielestaImpl}.
 * </p>
 *
 * @author CSC
 * @see KielestaImpl
 * @see fi.csc.avaa.khl.db.model.Kielesta
 * @see fi.csc.avaa.khl.db.model.KielestaModel
 * @generated
 */
@JSON(strict = true)
public class KielestaModelImpl extends BaseModelImpl<Kielesta>
    implements KielestaModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a kielesta model instance should use the {@link fi.csc.avaa.khl.db.model.Kielesta} interface instead.
     */
    public static final String TABLE_NAME = "kielesta";
    public static final Object[][] TABLE_COLUMNS = {
            { "kieliid", Types.INTEGER },
            { "kieli", Types.VARCHAR }
        };
    public static final String TABLE_SQL_CREATE = "create table kielesta (kieliid INTEGER not null primary key,kieli VARCHAR(75) null)";
    public static final String TABLE_SQL_DROP = "drop table kielesta";
    public static final String ORDER_BY_JPQL = " ORDER BY kielesta.kieliid ASC";
    public static final String ORDER_BY_SQL = " ORDER BY kielesta.kieliid ASC";
    public static final String DATA_SOURCE = "khl";
    public static final String SESSION_FACTORY = "khlSessionFactory";
    public static final String TX_MANAGER = "liferayTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.fi.csc.avaa.khl.db.model.Kielesta"),
            true);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.fi.csc.avaa.khl.db.model.Kielesta"),
            true);
    public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.column.bitmask.enabled.fi.csc.avaa.khl.db.model.Kielesta"),
            true);
    public static long KIELI_COLUMN_BITMASK = 1L;
    public static long KIELIID_COLUMN_BITMASK = 2L;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
                "lock.expiration.time.fi.csc.avaa.khl.db.model.Kielesta"));
    private static ClassLoader _classLoader = Kielesta.class.getClassLoader();
    private static Class<?>[] _escapedModelInterfaces = new Class[] {
            Kielesta.class
        };
    private int _kieliid;
    private String _kieli;
    private String _originalKieli;
    private long _columnBitmask;
    private Kielesta _escapedModel;

    public KielestaModelImpl() {
    }

    /**
     * Converts the soap model instance into a normal model instance.
     *
     * @param soapModel the soap model instance to convert
     * @return the normal model instance
     */
    public static Kielesta toModel(KielestaSoap soapModel) {
        if (soapModel == null) {
            return null;
        }

        Kielesta model = new KielestaImpl();

        model.setKieliid(soapModel.getKieliid());
        model.setKieli(soapModel.getKieli());

        return model;
    }

    /**
     * Converts the soap model instances into normal model instances.
     *
     * @param soapModels the soap model instances to convert
     * @return the normal model instances
     */
    public static List<Kielesta> toModels(KielestaSoap[] soapModels) {
        if (soapModels == null) {
            return null;
        }

        List<Kielesta> models = new ArrayList<Kielesta>(soapModels.length);

        for (KielestaSoap soapModel : soapModels) {
            models.add(toModel(soapModel));
        }

        return models;
    }

    @Override
    public int getPrimaryKey() {
        return _kieliid;
    }

    @Override
    public void setPrimaryKey(int primaryKey) {
        setKieliid(primaryKey);
    }

    @Override
    public Serializable getPrimaryKeyObj() {
        return _kieliid;
    }

    @Override
    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey(((Integer) primaryKeyObj).intValue());
    }

    @Override
    public Class<?> getModelClass() {
        return Kielesta.class;
    }

    @Override
    public String getModelClassName() {
        return Kielesta.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("kieliid", getKieliid());
        attributes.put("kieli", getKieli());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        Integer kieliid = (Integer) attributes.get("kieliid");

        if (kieliid != null) {
            setKieliid(kieliid);
        }

        String kieli = (String) attributes.get("kieli");

        if (kieli != null) {
            setKieli(kieli);
        }
    }

    @JSON
    @Override
    public int getKieliid() {
        return _kieliid;
    }

    @Override
    public void setKieliid(int kieliid) {
        _kieliid = kieliid;
    }

    @JSON
    @Override
    public String getKieli() {
        if (_kieli == null) {
            return StringPool.BLANK;
        } else {
            return _kieli;
        }
    }

    @Override
    public void setKieli(String kieli) {
        _columnBitmask |= KIELI_COLUMN_BITMASK;

        if (_originalKieli == null) {
            _originalKieli = _kieli;
        }

        _kieli = kieli;
    }

    public String getOriginalKieli() {
        return GetterUtil.getString(_originalKieli);
    }

    public long getColumnBitmask() {
        return _columnBitmask;
    }

    @Override
    public Kielesta toEscapedModel() {
        if (_escapedModel == null) {
            _escapedModel = (Kielesta) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelInterfaces, new AutoEscapeBeanHandler(this));
        }

        return _escapedModel;
    }

    @Override
    public Object clone() {
        KielestaImpl kielestaImpl = new KielestaImpl();

        kielestaImpl.setKieliid(getKieliid());
        kielestaImpl.setKieli(getKieli());

        kielestaImpl.resetOriginalValues();

        return kielestaImpl;
    }

    @Override
    public int compareTo(Kielesta kielesta) {
        int primaryKey = kielesta.getPrimaryKey();

        if (getPrimaryKey() < primaryKey) {
            return -1;
        } else if (getPrimaryKey() > primaryKey) {
            return 1;
        } else {
            return 0;
        }
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }

        if (!(obj instanceof Kielesta)) {
            return false;
        }

        Kielesta kielesta = (Kielesta) obj;

        int primaryKey = kielesta.getPrimaryKey();

        if (getPrimaryKey() == primaryKey) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return getPrimaryKey();
    }

    @Override
    public void resetOriginalValues() {
        KielestaModelImpl kielestaModelImpl = this;

        kielestaModelImpl._originalKieli = kielestaModelImpl._kieli;

        kielestaModelImpl._columnBitmask = 0;
    }

    @Override
    public CacheModel<Kielesta> toCacheModel() {
        KielestaCacheModel kielestaCacheModel = new KielestaCacheModel();

        kielestaCacheModel.kieliid = getKieliid();

        kielestaCacheModel.kieli = getKieli();

        String kieli = kielestaCacheModel.kieli;

        if ((kieli != null) && (kieli.length() == 0)) {
            kielestaCacheModel.kieli = null;
        }

        return kielestaCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(5);

        sb.append("{kieliid=");
        sb.append(getKieliid());
        sb.append(", kieli=");
        sb.append(getKieli());
        sb.append("}");

        return sb.toString();
    }

    @Override
    public String toXmlString() {
        StringBundler sb = new StringBundler(10);

        sb.append("<model><model-name>");
        sb.append("fi.csc.avaa.khl.db.model.Kielesta");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>kieliid</column-name><column-value><![CDATA[");
        sb.append(getKieliid());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>kieli</column-name><column-value><![CDATA[");
        sb.append(getKieli());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
